" Author    : Jorge Toro [jolthgs@gmail.com]
" Version   : 0.9.1
" Date      : 2015 - 2017
"
"################################################################################
" > Vundle.vim
"################################################################################
"to turn off default cache filetype rule.
"cache filetype rule at runtime interferes
"with that vundle alters the runtime environment.
" This must be first, because it changes other options as side effect
set nocompatible
filetype off
"adjust vim's runtime path to include the vundle
"location we cloned from GitHub.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" > Add plugins:
"colorscheme:
"Plugin 'tomasr/molokai'
"Plugin 'flazz/vim-colorschemes'
"Bundle 'altercation/vim-colors-solarized'
Bundle 'junegunn/seoul256.vim'
Bundle 'flazz/vim-colorschemes'


" All of your Plugins must be added before the following line
call vundle#end()            " required
" Now we can turn our filetype functionality back on
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set history=70             " sets how many lines of history VIM has to remember
set autoread               " set to auto read when a file is changed from the outside
set encoding=utf-8         " set utf8 as standard encoding and en_US as the standard language
set autoindent             " automatic indent new lines, align the new line indent with the previous line
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap 		           " to display long lines as just one line (i.e. you have to scroll horizontally to see the entire line)
set ffs=unix,dos,mac       " use Unix as the standard file type

set softtabstop=2          " insert/delete # spaces when hitting a TAB/BACKSPACE (for python 'set softtabstop=4')
set shiftwidth=2  	       " operation >> indents 4 columns; << unindents 4 columns
set tabstop=4     	       " a hard TAB displays as 4 columns. a tab is four spaces
set expandtab              " expand tabs to spaces, insert spaces when hitting TABs
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=79  	       " lines longer than 79 columns will be broken
set colorcolumn=+1         " color column 80
"" To highlight tabs that exceed column 81
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
"match OverLength /\%>80v.\+/
"" A nice way of marking just the first character going out of the specified bounds
highlight ColorColumn ctermbg=magenta "set to whatever you like
call matchadd('ColorColumn', '\%81v', 100) "set column nr
"" Make window 80 + some for numbers wide
"noremap <Leader>w :let @w=float2nr(log10(line("$")))+82\|:vertical resize <c-r>w<cr>

set virtualedit=block      " allow virtual edit in visual block ..

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------
" With a map leader it's possible to do extra key combinations
"like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

"" Fast saving
"$ echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
nmap <c-s> :w<cr>
"within a document while in 'insert' mode will escape to normal mode
imap <c-s> <esc>:w<cr>a

" exit to normal mode with 'jk'
"inoremap jj <ESC>
inoremap jk <esc>
" exit to normal mode with ':w<CR>'
"inoremap :w<CR> <ESC>:w<CR>i

" You can toggle the syntax on/off with keyup <F7>:
"map <F7> :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" This appends the current date and time after the cursor:
"map <F2> a<C-R>=strftime("%c")<CR><Esc>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
set ruler                  " show the cursor position all the time
set showcmd                " display an incomplete command in the lower right corner of the Vim window
set cursorline		       " highlight current line
set number                 " line numbers

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------
"" Search rules:
set hlsearch               " highlight matches
map <F2> :set hlsearch!<CR>
set incsearch              " incremental searching
set ignorecase             " searches are case insensitive...
set smartcase              " ... unless they contain at least one capital letter
set scrolloff=3            " don't show search results as the first line

" ---------------------------------------------------------------------------
"  My Settings
" ---------------------------------------------------------------------------
" filetype detection (use filetype.vim). Determinate the "type" of a file.
" example: if editing foo.py the command :set ft? should display filetype=python 
" The file type determines whether any plugins for scripts, indenting rules, or syntax highlighting are loaded.
"filetype plugin on
filetype on
"filetype indent on
filetype indent plugin on

" syntax highliting:
syntax on
"syntax enable

" vim-colors-solarized:
"syntax enable
"set background=dark
"colorscheme solarized
" seoul256:
"colo seoul256
"set background=dark
" vim-colorschemes:
colorscheme molokai
"colorscheme ingretu
"colorscheme antares 

" Enable hidden Buffer. This means that you can have unwritten changes to a 
" file and open a new file using :e, without being forced to write or undo 
" your changes first. Also, undo buffers and marks are preserved while 
" the buffer is open:
set hidden

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Fix some tmux issues
if &term =~ '256color'
  set t_ut=
endif

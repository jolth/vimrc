"
" https://github.com/jolth/vimrc
" version: 2.0
"
" Copyright (c) 2015-2017 Jorge Toro <jolthgs@gmail.com>
"
" ----------------------------------------------------------------------------
" Vundle Settings
" ----------------------------------------------------------------------------
"to turn off default cache filetype rule.
"cache filetype rule at runtime interferes
"with that vundle alters the runtime environment.
" This must be first, because it changes other options as side effect
set nocompatible
filetype off
"adjust vim's runtime path to include the vundle
"location we cloned from GitHub.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ----------------------------------------------------------------------------
"  Plugins
" ----------------------------------------------------------------------------

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " [colorscheme]
  "Plugin 'tomasr/molokai'
  "Bundle 'altercation/vim-colors-solarized'
  Bundle 'junegunn/seoul256.vim'
  Bundle 'flazz/vim-colorschemes'

  " [YankRing] Yank history navigation. http://www.vim.org/scripts/script.php?script_id=1234
  Bundle 'YankRing.vim'

  " ---------- Navegation -----------
  " Project and file navigation
  Bundle 'scrooloose/nerdtree'
  Bundle 'myusuf3/numbers.vim'

  " [matchit] Latex/XML/HTML tags navigation. https://github.com/tmhedberg/matchit
  Bundle 'tmhedberg/matchit'
  " Load matchit.vim, but only if the user hasn't installed a newer version.
  if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
  endif

  " surroundings parentheses, brackets, quotes, XML tags, and more.
  Bundle 'tpope/vim-surround'

  " [vim-airline] Lean & mean status/tabline for vim that's light as air. https://github.com/vim-airline/vim-airline
  Bundle 'vim-airline/vim-airline'
  " [vim-airline-themes] This is the oficial themes vim-airline. https://github.com/vim-airline/vim-airline-themes
  Bundle 'vim-airline/vim-airline-themes'

  " ---------- Git ----------
  " if git is the only version control system you use:
  Bundle 'airblade/vim-gitgutter'
  " if you work with other version control systems:
  "Bundle 'mhinz/vim-signify'

  " ---------- Python ----------
  " [vim-python-pep8-indent] "includ into python-mode
  "Bundle 'Vimjas/vim-python-pep8-indent'
  " [python-mode]
  Bundle 'klen/python-mode'

  " Syntax checking plugin
  Bundle 'scrooloose/syntastic'

  " [neocomplete]
  Bundle 'Shougo/neocomplete.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" Now we can turn our filetype functionality back on
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set history=500            " sets how many lines of history VIM has to remember
set autoread               " set to auto read when a file is changed from the outside
set encoding=utf-8         " set utf8 as standard encoding and en_US as the standard language
inoremap # X<BS>#
set nowrap 		           " to display long lines as just one line (i.e. you have to scroll horizontally to see the entire line)
set ffs=unix,dos,mac       " use Unix as the standard file type

set softtabstop=2          " insert/delete # spaces when hitting a TAB/BACKSPACE (for python 'set softtabstop=4')
set shiftwidth=2  	       " operation >> indents 4 columns; << unindents 4 columns
set tabstop=4     	       " a hard TAB displays as 4 columns. a tab is four spaces
"set shiftround            " round indent to multiple of 'shiftwidth'
set autoindent             " automatic indent new lines, align the new line indent with the previous line
set expandtab              " expand tabs to spaces, insert spaces when hitting TABs
set smartindent            " be smart about it. like above but more generic
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=80  	       " lines longer than 79 columns will be broken
set colorcolumn=+1         " color column 80
set whichwrap=b,s,h,l,<,>,[,]   " move freely between lines using these commands

" tab length exceptions on some file types
"autocmd FileType html setlocal shiftwidth=4 tabstop=4 softtabstop=4
"autocmd FileType htmldjango setlocal shiftwidth=4 tabstop=4 softtabstop=4
"autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4

" To highlight tabs that exceed column 81
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
"match OverLength /\%>80v.\+/
" A nice way of marking just the first character going out of the specified bounds
"highlight ColorColumn ctermbg=magenta "set to whatever you like
"call matchadd('ColorColumn', '\%81v', 100) "set column nr
" Make window 80 + some for numbers wide
"noremap <Leader>w :let @w=float2nr(log10(line("$")))+82\|:vertical resize <c-r>w<cr>

set virtualedit=block      " allow virtual edit in visual block ..

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" Change the mapleader from \ to ,
let mapleader = ","
let g:mapleader = ","

"" Fast saving
"$ echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
" in normal' mode saves the file and exits
"nmap <c-s> :w<cr>
" within a document while in 'insert' mode will escape to normal mode
"imap <c-s> <esc>:w<cr>a

" exit to normal mode with 'jk'
"inoremap jj <ESC>
inoremap jk <esc>
" exit to normal mode with ':w<CR>'
"inoremap :w<CR> <ESC>:w<CR>i

" You can toggle the syntax on/off with keyup <F7>:
"map <F7> :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" This appends the current date and time after the cursor:
"map <F2> a<C-R>=strftime("%c")<CR><Esc>

" normal mode: saves the file and exits. keypress ,,
nnoremap <leader><leader> :x<cr>
" insert mode: saves the file and exits. keypress ,,
inoremap <leader><leader> <esc>:xa<cr>
" allow quit via single keypress (Q). If you have unsaved buffers, it'll prompt you before exiting.
map Q :qa<CR>

"put this in your shell: $ echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
"Ctrl + s: to save,
"ctrl + d: to save and exit,
"ctrl + q: to exit discarding changes.
inoremap <C-s> <esc>:w<cr>                 " save files
nnoremap <C-s> :w<cr>
inoremap <C-d> <esc>:wq!<cr>               " save and exit
nnoremap <C-d> :wq!<cr>
"inoremap <C-q> <esc>:q<cr>                 " quit
"nnoremap <C-q> :q<cr>
inoremap <C-q> <esc>:qa!<cr>               " quit discarding changes
nnoremap <C-q> :qa!<cr>

" save as sudo
"ca w!! w !sudo tee "%"

" use <leader>l to toggle display of whitespace
"nmap l :set list!<CR>
nmap <leader>l :set list!<CR>

" display a buffer displaying the yankring's contents:
"nnoremap <silent> <F11> :YRShow<CR> 
nnoremap <silent> <F3> :YRShow<cr>
inoremap <silent> <F3> <ESC>:YRShow<cr>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
set ruler                  " show the cursor position all the time
set showcmd                " display an incomplete command in the lower right corner of the Vim window
set cursorline		       " highlight current line
set laststatus=2           " show a status line even when only one window is shown
set number                 " line numbers
" Toggle line numbers
nnoremap <leader>N :setlocal number!<cr>

" change working directory automatically
" disabled for mapleader that makes this explicit
"set autochdir             " automatically change window's cwd to file's dir


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------
"" Search rules:
set hlsearch               " highlight matches
map <F2> :set hlsearch!<CR>
set incsearch              " incremental searching
set ignorecase             " searches are case insensitive...
set smartcase              " ... unless they contain at least one capital letter
set scrolloff=3            " when scrolling, keep cursor 3 lines away from screen border
set visualbell             " shut the fuck up
set ttyfast                " indicates a fast terminal connection and smoother changes
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set showmode               " always show what mode we're currently editing in
" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest
" ---------------------------------------------------------------------------
"  My Settings
" ---------------------------------------------------------------------------
" filetype detection (use filetype.vim). Determinate the "type" of a file.
" example: if editing foo.py the command :set ft? should display filetype=python
" The file type determines whether any plugins for scripts, indenting rules, or syntax highlighting are loaded.
" allow plugins by file type (required for plugins!)
filetype plugin on         " load plugins
filetype on                " try to detect filetypes
filetype indent on
filetype plugin indent on  " enable loading indent file for filetype
"filetype indent plugin on

" syntax highliting:
"syntax on
"syntax enable
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" ---------- [vim-colors-solarized] ----------
"syntax enable
"set background=dark
"colorscheme solarized
" [seoul256]
" seoul256 (dark):
" Range:   233 (darkest) ~ 239 (lightest)
" Default: 237
"let g:seoul256_background = 233
"colo seoul256
" seoul256 (light):
" Range:   252 (darkest) ~ 256 (lightest)
" Default: 253
"let g:seoul256_background = 256
"colo seoul256

function Color_solarized()
  let g:seoul256_background = 233
  colo seoul256
endfunction

" ---------- [vim-colorschemes] ----------
"colorscheme molokai
"colorscheme ingretu
"colorscheme antares 

" use 256 colors when possible
if (&term =~? 'mlterm\|xterm\|xterm-256\|screen-256') || has('nvim')
	let &t_Co = 256
    "colorscheme molokai
    call Color_solarized()
else
    colorscheme delek
endif

" colors for gvim
if has('gui_running')
    colorscheme wombat
endif

" Enable hidden Buffer. This means that you can have unwritten changes to a 
" file and open a new file using :e, without being forced to write or undo 
" your changes first. Also, undo buffers and marks are preserved while 
" the buffer is open:
set hidden

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Fix some tmux issues
if &term =~ '256color'
  set t_ut=
endif

" customize the wildmenu
" wildmenu and wildmode are used for command line completion :color <Tab>
set wildmenu               " 
"set wildmode=list:longest
" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest,full
" ignore: .swap, .bak, .pyc, etc files
set wildignore=*.swp,*.bak,*.pyc,*.class,*.jar,*.gif,*.png,*.jpg
set wildignore+=*.dll,*.o,*.exe,*.jpeg,*$py.class,*.class,*/*.dSYM/*,*.dylib

" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp " directory to place swap files in
set backup " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo
" ---------- [YankRing.vim] ----------
" store yankring history file there too.
let g:yankring_history_dir = '~/.vim/dirs/'

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif


" split and tab navigation
func! GoLeft()
  let oldw = winnr()
  silent! exe "normal! \<c-w>h"
  let neww = winnr()
  if oldw == neww
    exe "normal! \gT"
  endif
endfunction

func! GoRight()
  let oldw = winnr()
  silent! exe "normal! \<c-w>l"
  let neww = winnr()
  if oldw == neww
    exe "normal! \gt"
  endif
endfunction

" window-tab navigation
nnoremap <silent> <C-h> :call GoLeft()<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <silent> <C-l> :call GoRight()<CR>

" navigate windows with meta+arrows
map <M-Right> <c-w>l
map <M-Left> <c-w>h
map <M-Up> <c-w>k
map <M-Down> <c-w>j
imap <M-Right> <ESC><c-w>l
imap <M-Left> <ESC><c-w>h
imap <M-Up> <ESC><c-w>k
imap <M-Down> <ESC><c-w>j

" tab navigation mappings
map tn :tabn<CR>
map tp :tabp<CR>
map tm :tabm
map tt :tabnew
map ts :tab split<CR>
map <C-S-Right> :tabn<CR>
imap <C-S-Right> <ESC>:tabn<CR>
map <C-S-Left> :tabp<CR>
imap <C-S-Left> <ESC>:tabp<CR>

" ---------------------------------------------------------------------------
"  Plugins Setting and mappings
" ---------------------------------------------------------------------------

" ---------- [vim-airline] ----------
" smarter tab line
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" [vim-airline-themes]
" themes: 'badwolf', 'murmur', 'bubblegum'
" see themes: https://github.com/vim-airline/vim-airline/wiki/Screenshots
let g:airline_theme='jellybeans'                " configure theme
"let g:airline_powerline_fonts = 1
let g:airline_powerline_fonts = 0
let g:airline#extensions#whitespace#enabled = 1

" ---------- [Python-Mode] ----------
" Pymode variables :PymodeTroubleshooting
" Common fuctionality
let g:pymode = 1                                 " turn on the whole plugin (default = 1)
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1                         " Setup default python options: nowrap, textwidth, etc
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 1
let g:pymode_paths = []                          " Add paths to `sys.path`. Value is list of path's strings.
"let g:pymode_quickfix_minheight = 3              " Setup pymode |quickfix| window
"let g:pymode_quickfix_maxheight = 6              " Setup pymode |quickfix| window
" Frequent Problems
" Python version
"let g:pymode_python = 'python3'                  " to enable python 3 syntax checking
let g:pymode_python = 'python'                   " to enable python 2 syntax checking (default)
let g:pymode_rope_lookup_project = 0             " avoid freezig for rope
" pep8 indents
let g:pymode_indent=1                            " Pymode supports PEP8-compatible python indent.
" code folding
let g:pymode_folding=1                           " Fast and usual python folding in Vim.
" Vim motion
let g:pymode_motion = 1                          " Enable pymode-motion
" Show documentation
let g:pymode_doc = 1                             " turns on the documentation script
let g:pymode_doc_bind = 'K'                      " bind keys to show documentation for current word (selection)
" Support virtualenv
let g:pymode_virtualenv = 1                      " enable automatic virtualenv detection
"let g:pymode_virtualenv_path = $VIRTUAL_ENV      " set path to virtualenv manually
let g:pymode_virtualenv_path = '/home/jolth/virtualenv/py2.7'      " set path to virtualenv manually
" Run code
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
" breakpoints
let g:pymode_breakpoint = 1                      " enable functionality
let g:pymode_breakpoint_bind = '<leader>b'       " bind keys
let g:pymode_breakpoint_cmd = ''                 " manually set breakpoint command (leave empty for automatic detection)

" Code Checking
let g:pymode_lint = 1                            " turn on code checking
"let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_checkers = ['flake8', 'pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_cwindow = 1                    " auto open cwindow (quickfix) if any errors have been found
let g:pymode_lint_ignore = ''
let g:pymode_lint_select = ''
let g:pymode_lint_message = 1                    " show error message if cursor placed at the error line
let g:pymode_lint_on_fly = 0
let g:pymode_lint_on_write = 1                   " check code on every save (if file has been modified)
let g:pymode_lint_unmodified = 0                 " check code on every save (every)
let g:pymode_lint_signs = 1                      " place error |signs| 
" Definitions for |signs| 
    let g:pymode_lint_todo_symbol = 'WW'
    let g:pymode_lint_comment_symbol = 'CC'
    let g:pymode_lint_visual_symbol = 'RR'
    let g:pymode_lint_error_symbol = 'EE'
    let g:pymode_lint_info_symbol = 'II'
    let g:pymode_lint_pyflakes_symbol = 'FF'

" Rope support
" https://github.com/andviro/python-mode#rope-refactoring-library
let g:pymode_rope = 0                            " turn on the rope script. change to 1 to use rope.
let g:pymode_rope_completion = 1                 " turn on code completion support in the plugin.
let g:pymode_rope_complete_on_dot = 1            " turn on autocompletion when typing a period
let g:pymode_rope_completion_bind = '<C-Space>'  " keymap for autocomplete
let g:pymode_rope_goto_definition_bind = '<C-c>g' " press on any object in your code you will be moved to definition.
let g:pymode_rope_goto_definition_cmd = 'new'
let g:pymode_rope_rename_bind = '<C-c>rr'

" Syntax highlight
let g:pymode_syntax = 1                          " enable pymode's custom syntax highlighting
" slower syntax synchronization that is better at handling code blocks in
" docstrings. Consider disabling this on slower hardware.
let g:pymode_syntax_slow_sync = 1                " for fast machines 
" Enable all python highlights 
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function=g:pymode_syntax_all            " Highlight "print" as a function
let g:pymode_syntax_highlight_async_await=g:pymode_syntax_all        " Highlight "async/await" keywords
let g:pymode_syntax_highlight_equal_operator=g:pymode_syntax_all     " Highlight '=' operator
let g:pymode_syntax_highlight_stars_operator=g:pymode_syntax_all     " Highlight '*' operator
let g:pymode_syntax_highlight_self=g:pymode_syntax_all               " Highlight 'self' keyword
let g:pymode_syntax_indent_errors=g:pymode_syntax_all                " Highlight indent's errors
let g:pymode_syntax_space_errors=g:pymode_syntax_all                 " Highlight space's errors
" Highlight string formatting
let g:pymode_syntax_string_formatting=g:pymode_syntax_all
let g:pymode_syntax_string_format=g:pymode_syntax_all
let g:pymode_syntax_string_templates=g:pymode_syntax_all
let g:pymode_syntax_doctests=g:pymode_syntax_all
let g:pymode_syntax_builtin_objs=g:pymode_syntax_all                 " Highlight builtin objects (True, False, ...)
let g:pymode_syntax_builtin_types=g:pymode_syntax_all                " Highlight builtin types (str, list, ...)
let g:pymode_syntax_highlight_exceptions=g:pymode_syntax_all         " Highlight exceptions (TypeError, ValueError, ...)
let g:pymode_syntax_docstrings=g:pymode_syntax_all                   " Highlight docstrings as pythonDocstring (otherwise as pythonString)

" highlight 'long' lines (>= 80 symbols) in python files
augroup vimrc_autocmds
    autocmd!
    autocmd FileType python,rst,c,cpp highlight Excess ctermbg=DarkGrey guibg=Black
    autocmd FileType python,rst,c,cpp match Excess /\%81v.*/
    autocmd FileType python,rst,c,cpp set nowrap
    autocmd FileType python,rst,c,cpp set colorcolumn=80
augroup END

" ---------- [Syntastic] ----------
" show list of errors and warnings on the current file
nmap <leader>e :Errors<CR>
"let g:syntastic_python_python_exec='python'
"nmap <silent> <leader>q :SyntasticCheck # <CR> :bp <BAR> bd #<CR>
"let g:syntastic_always_populate_loc_list=1
"let g:syntastic_auto_loc_list=1
"let g:syntastic_enable_signs=1
"let g:syntastic_check_on_wq=0
"let g:syntastic_aggregate_errors=1
"let g:syntastic_loc_list_height=5
"let g:syntastic_error_symbol='X'
"let g:syntastic_style_error_symbol='X'
"let g:syntastic_warning_symbol='x'
"let g:syntastic_style_warning_symbol='x'
" Syntactic supports checkers for python:
"let g:syntastic_python_checkers=['pyflakes', 'pep8', 'mccabe']
"let g:syntastic_python_checkers=['pylint']
"let g:syntastic_python_checkers=['flake8', 'pydocstyle', 'python']
"let g:syntastic_javascript_checkers = ['jshint', 'eslint']       " sudo npm install -g jshint && npm install eslint --global

" Use jshint (uses ~/.jshintrc)
let g:syntastic_javascript_checkers = ['jshint']       " sudo npm install -g jshint
" Use flake8
"let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,E121,W801"'
" don't put icons on the sign column (it hides the vcs status icons of signify)
let g:syntastic_enable_signs = 0
" On by default, turn it off for python (validate python with python-mode)
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['python'] }

" Check on buffer open
let g:syntastic_check_on_open = 1
" Better :sign interface symbols
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'
"let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'


" ---------- [NERDTree] ----------
"autocmd vimenter * NERDTree                      " open a NERDTree automatically when vim starts up
" open a NERDTree automatically when vim start up if no files were specified:
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" open a NERDTree automatically when vim start up on openind a directory:
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close vim if the only window left open is a NERDTree:
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ignore files in NERDTree:
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '__pycache__$']          
" mapa s key to open NERDTree:
map " :NERDTreeToggle<CR>


" ---------- [numbers] ----------
nnoremap <F4> :NumbersToggle<CR>
"nnoremap <F5> :NumbersOnOff<CR>


" ---------- [neocomplete] ----------
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
" Comment this line to enable autocompletion preview window
" (displays documentation related to the selected completion option)
" Disabled by default because preview makes the window flicker
"set completeopt-=preview
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'



" TESTING




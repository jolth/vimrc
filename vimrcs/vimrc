"
" Copyright (c) 2015-2017 Jorge Toro <jolthgs@gmail.com>
"
" ----------------------------------------------------------------------------
" Vundle Settings
" ----------------------------------------------------------------------------
"to turn off default cache filetype rule.
"cache filetype rule at runtime interferes
"with that vundle alters the runtime environment.
" This must be first, because it changes other options as side effect
set nocompatible
filetype off
"adjust vim's runtime path to include the vundle
"location we cloned from GitHub.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ----------------------------------------------------------------------------
"  Plugins
" ----------------------------------------------------------------------------

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " [colorscheme]
  "Plugin 'tomasr/molokai'
  "Bundle 'altercation/vim-colors-solarized'
  Bundle 'junegunn/seoul256.vim'
  Bundle 'flazz/vim-colorschemes'

  " [YankRing] Yank history navigation. http://www.vim.org/scripts/script.php?script_id=1234
  Bundle 'YankRing.vim'

  " [matchit] Latex/XML/HTML tags navigation. https://github.com/tmhedberg/matchit
  Bundle 'tmhedberg/matchit'
  " Load matchit.vim, but only if the user hasn't installed a newer version.
  if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
  endif

  " [vim-airline] Lean & mean status/tabline for vim that's light as air. https://github.com/vim-airline/vim-airline
  Bundle 'vim-airline/vim-airline'
  " [vim-airline-themes] This is the oficial themes vim-airline. https://github.com/vim-airline/vim-airline-themes
  Bundle 'vim-airline/vim-airline-themes'




" All of your Plugins must be added before the following line
call vundle#end()            " required
" Now we can turn our filetype functionality back on
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set history=500            " sets how many lines of history VIM has to remember
set autoread               " set to auto read when a file is changed from the outside
set encoding=utf-8         " set utf8 as standard encoding and en_US as the standard language
set autoindent             " automatic indent new lines, align the new line indent with the previous line
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap 		           " to display long lines as just one line (i.e. you have to scroll horizontally to see the entire line)
set ffs=unix,dos,mac       " use Unix as the standard file type

set softtabstop=2          " insert/delete # spaces when hitting a TAB/BACKSPACE (for python 'set softtabstop=4')
set shiftwidth=2  	       " operation >> indents 4 columns; << unindents 4 columns
set tabstop=4     	       " a hard TAB displays as 4 columns. a tab is four spaces
"set shiftround            " round indent to multiple of 'shiftwidth'
set expandtab              " expand tabs to spaces, insert spaces when hitting TABs
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=79  	       " lines longer than 79 columns will be broken
set colorcolumn=+1         " color column 80
" To highlight tabs that exceed column 81
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
"match OverLength /\%>80v.\+/
" A nice way of marking just the first character going out of the specified bounds
highlight ColorColumn ctermbg=magenta "set to whatever you like
call matchadd('ColorColumn', '\%81v', 100) "set column nr
" Make window 80 + some for numbers wide
"noremap <Leader>w :let @w=float2nr(log10(line("$")))+82\|:vertical resize <c-r>w<cr>

set virtualedit=block      " allow virtual edit in visual block ..

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" Change the mapleader from \ to ,
let mapleader = ","
let g:mapleader = ","

"" Fast saving
"$ echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
" in normal' mode saves the file and exits
"nmap <c-s> :w<cr>
" within a document while in 'insert' mode will escape to normal mode
"imap <c-s> <esc>:w<cr>a

" exit to normal mode with 'jk'
"inoremap jj <ESC>
inoremap jk <esc>
" exit to normal mode with ':w<CR>'
"inoremap :w<CR> <ESC>:w<CR>i

" You can toggle the syntax on/off with keyup <F7>:
"map <F7> :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" This appends the current date and time after the cursor:
"map <F2> a<C-R>=strftime("%c")<CR><Esc>

" normal mode: saves the file and exits. keypress ,,
nnoremap <leader><leader> :x<cr>
" insert mode: saves the file and exits. keypress ,,
inoremap <leader><leader> <esc>:xa<cr>
" allow quit via single keypress (Q). If you have unsaved buffers, it'll prompt you before exiting.
map Q :qa<CR>

"put this in your shell: $ echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
"Ctrl + s: to save,
"ctrl + d: to save and exit,
"ctrl + q: to exit discarding changes.
inoremap <C-s> <esc>:w<cr>                 " save files
nnoremap <C-s> :w<cr>
inoremap <C-d> <esc>:wq!<cr>               " save and exit
nnoremap <C-d> :wq!<cr>
inoremap <C-q> <esc>:q<cr>                 " quit
nnoremap <C-q> :q<cr>
"inoremap <C-q> <esc>:qa!<cr>               " quit discarding changes
"nnoremap <C-q> :qa!<cr>

" use <leader>l to toggle display of whitespace
"nmap l :set list!<CR>
nmap <leader>l :set list!<CR>

" display a buffer displaying the yankring's contents:
"nnoremap <silent> <F11> :YRShow<CR> 
nnoremap <silent> <F3> :YRShow<cr>
inoremap <silent> <F3> <ESC>:YRShow<cr>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
set ruler                  " show the cursor position all the time
set showcmd                " display an incomplete command in the lower right corner of the Vim window
set cursorline		       " highlight current line
set number                 " line numbers
" Toggle line numbers
nnoremap <leader>N :setlocal number!<cr>

" change working directory automatically
" disabled for mapleader that makes this explicit
"set autochdir             " automatically change window's cwd to file's dir


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------
"" Search rules:
set hlsearch               " highlight matches
map <F2> :set hlsearch!<CR>
set incsearch              " incremental searching
set ignorecase             " searches are case insensitive...
set smartcase              " ... unless they contain at least one capital letter
set scrolloff=3            " don't show search results as the first line
set visualbell             " shut the fuck up
set ttyfast                " indicates a fast terminal connection
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set showmode               " always show what mode we're currently editing in

" ---------------------------------------------------------------------------
"  My Settings
" ---------------------------------------------------------------------------
" filetype detection (use filetype.vim). Determinate the "type" of a file.
" example: if editing foo.py the command :set ft? should display filetype=python
" The file type determines whether any plugins for scripts, indenting rules, or syntax highlighting are loaded.
"filetype plugin on
filetype on                " try to detect filetypes
"filetype indent on
"filetype plugin indent on    " enable loading indent file for filetype
filetype indent plugin on

" syntax highliting:
"syntax on
"syntax enable
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" [vim-colors-solarized]
"syntax enable
"set background=dark
"colorscheme solarized
" [seoul256]
" seoul256 (dark):
" Range:   233 (darkest) ~ 239 (lightest)
" Default: 237
let g:seoul256_background = 233
colo seoul256
" seoul256 (light):
" Range:   252 (darkest) ~ 256 (lightest)
" Default: 253
"let g:seoul256_background = 256
"colo seoul256
" [vim-colorschemes]
"colorscheme molokai
"colorscheme ingretu
"colorscheme antares 

" Enable hidden Buffer. This means that you can have unwritten changes to a 
" file and open a new file using :e, without being forced to write or undo 
" your changes first. Also, undo buffers and marks are preserved while 
" the buffer is open:
set hidden

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Fix some tmux issues
if &term =~ '256color'
  set t_ut=
endif

" customize the wildmenu
" wildmenu and wildmode are used for command line completion :color <Tab>
set wildmenu               " 
"set wildmode=list:longest
" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest,full
" ignore: .swap, .bak, .pyc, etc files
set wildignore=*.swp,*.bak,*.pyc,*.class,*.jar,*.gif,*.png,*.jpg
set wildignore+=*.dll,*.o,*.exe,*.jpeg,*$py.class,*.class,*/*.dSYM/*,*.dylib

" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp " directory to place swap files in
set backup " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo
" [YankRing.vim]
" store yankring history file there too.
let g:yankring_history_dir = '~/.vim/dirs/'

" split and tab navigation
func! GoLeft()
  let oldw = winnr()
  silent! exe "normal! \<c-w>h"
  let neww = winnr()
  if oldw == neww
    exe "normal! \gT"
  endif
endfunction

func! GoRight()
  let oldw = winnr()
  silent! exe "normal! \<c-w>l"
  let neww = winnr()
  if oldw == neww
    exe "normal! \gt"
  endif
endfunction

" window-tab navigation
nnoremap <silent> <C-h> :call GoLeft()<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <silent> <C-l> :call GoRight()<CR>


" ---------------------------------------------------------------------------
"  Plugins Setting and mappings
" ---------------------------------------------------------------------------

" [vim-airline]
" smarter tab line
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" [vim-airline-themes]
" themes: 'badwolf', 'murmur', 'bubblegum'
" see themes: https://github.com/vim-airline/vim-airline/wiki/Screenshots
let g:airline_theme='jellybeans'                " configure theme
let g:airline_powerline_fonts=1

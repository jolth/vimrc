"################################################################################
" Author    : Jorge A. Toro [jolthgs@gmail.com]
" Version   : 0.7 
" Date      : 04/03/2015   
"
" Thanks    : Amir Salihefendic [https://github.com/amix/vimrc] 
"           : https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven
"
"                       INSTALL
" :PluginInstall
"
"################################################################################
"
"################################################################################
"                       Fast Access
"
" <F2>              : Enable/Disable highlight the search
" Ctrl+n            : NERDTreeToggle
" Ctrl+w+v          : Vertical windows
" Ctrl+w+s          : Horizontal windows 
" Ctrl+w,Ctrl+w     : Switch between windows
" Ctrl+w+[j,k,h,l]  : Switch to adjacent window (intuitively up, down, left, right)
" Tab or Ctrl+p     : Supertab, for all your insert completion needs 
" zc/zo             : To close a fold and to open one. See :help fold-commands (VISUAL MODE)
"                   : press <Space> to toggle the current fold open/closed.
" Ctrl+w+q          : Quit
" Ctrl+s            : Save
"
"################################################################################
"
"################################################################################
" > GENERAL
"################################################################################
" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"" With a map leader it's possible to do extra key combinations
"like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

"" Fast saving
"Para que funcione debes escribir en consola: 
"echo "bind -r '\C-s' ; stty -ixon" >> ~/.bashrc;source ~/.bashrc
nmap <c-s> :w<cr>
"within a document while in 'insert' mode will escape to normal mode
imap <c-s> <esc>:w<cr>a     

"################################################################################
" > Vundle.vim
"################################################################################
set nocompatible              " be iMproved, required
filetype off                  " required

"" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"################################################################################
" > Plugins
"################################################################################

"surround.vim https://github.com/tpope/vim-surround
Plugin 'tpope/vim-surround'
"Supertab https://github.com/ervandew/supertab
Plugin 'ervandew/supertab'
"vim-airline https://github.com/bling/vim-airline
Plugin 'bling/vim-airline'
"NERDTree https://github.com/scrooloose/nerdtree
Plugin 'scrooloose/nerdtree'


"" Color schemes
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'
Plugin 'altercation/vim-colors-solarized'

"" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"################################################################################
" > Color and Fonts 
"################################################################################
"" Enable syntax highlighting
syntax enable

"" vim-colorschemes
"colorscheme python 
"colorscheme colorful 
"colorscheme fine_blue 
"colorscheme herald 
"colorscheme ir_black 
"colorscheme jelleybeans 
"colorscheme desert
colorscheme ingretu 
set background=dark

"" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

"" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

"" Use Unix as the standard file type
set ffs=unix,dos,mac

"################################################################################
" > Configure Plugins 
"################################################################################
"" Molokai Color Scheme for Vim
"let g:molokai_original = 1
"let g:rehash256 = 1

"" vim-colors-solarized
"syntax enable 
"set background=dark
"colorscheme solarized
"let g:solarized_termcolors=256
"let g:solarized_termcolors= 16 | 256 
"let g:solarized_italic = 1
"let g:solarized_contrast = "normal"| "high"

"" vim-airline
let g:airline_section_b = '%{strftime("%c")}'
let g:airline_section_y = 'BN: %{bufnr("%")}'
"smarter tab line
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

"" NERDTree
map <C-n> :NERDTreeToggle<CR>
"How can I close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"################################################################################ CONFIGURE 
set nocompatible
"syntax enable
set ruler
set showcmd
set hidden          "fuerza cerrar una ventana así no se haya guardado.
"wildmenu and wildmode are used for command line completion :color <Tab>
set wildmenu
set wildmode=list:longest
set cursorline
set visualbell      " Sssshh!
set ttyfast
" To display the status line always
set laststatus=2    "debe estar activo para poder usar plugin powerline y vim-airline.
" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \Line:\ %l
set splitright

"" Indent
filetype plugin indent on       " load file type plugins + indentation
"desactivar indentación para determinado lenguajes:
"au filetype php,phtml,rb call DisableIndent()
"function! DisableIndent()
"    set autoindent&
"    set cindent&
"    set smartindent&
"    set indentexpr&
"endfunction

set number
"set relativenumber

"" Syntax Highlighting and Validation
"syntax on                    " syntax highlighing
filetype on                  " try to detect filetypes
filetype plugin indent on    " enable loading indent file for filetype

"" Use <leader>l to toggle display of whitespace
"nmap <leader>l :set list!<CR>
nmap l :set list!<CR>

"" Automatically change window's cwd to file's dir
"set autochdir
				
"" Whitespace
"set wrap 			"the line is still one line of text, but Vim displays it on multiple lines.
set nowrap 			"To display long lines as just one line (i.e. you have to scroll horizontally to see the entire line)
set textwidth=79  	" lines longer than 79 columns will be broken
set shiftwidth=4  	" operation >> indents 4 columns; << unindents 4 columns
set tabstop=4     	" a hard TAB displays as 4 columns
set expandtab       " insert spaces when hitting TABs
set softtabstop=4   " insert/delete 4 spaces when hitting a TAB/BACKSPACE
set shiftround      " round indent to multiple of 'shiftwidth'
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent      " align the new line indent with the previous line

"" Code Folding
set foldmethod=indent
"set foldmethod=manual
"set foldlevel=4
"press Space to toggle the current fold open/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

"" Searching
set hlsearch                    " highlight matches
map <F2> :set hlsearch!<CR>
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set scrolloff=3                 " don't show search results as the first line

" Directories for swp files. Debes crear los directorios mkdir ~/.vim/backup
set backupdir=~/.vim/backup
set directory=~/.vim/backup
"set backupdir=~/.vimbackup
"set directory=~/.vimbackup

"" Window Splits
""Vertical Split : Ctrl+w + v
""Horizontal Split : Ctrl+w + s
""Close current windows: Ctrl+w + q
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"" To highlight tabs that exceed column 81
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
"match OverLength /\%>80v.\+/
"" A nice way of marking just the first character going out of the specified bounds
highlight ColorColumn ctermbg=magenta "set to whatever you like
call matchadd('ColorColumn', '\%81v', 100) "set column nr
"" Make window 80 + some for numbers wide 
"noremap <Leader>w :let @w=float2nr(log10(line("$")))+82\|:vertical resize <c-r>w<cr> 

"################################################################################
" > Helper functions
"################################################################################

"" This will recall the position when I edit a file more than once.
if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif
